[{"/Users/user/PycharmProjects/soldgame/DotNet/ToDoApp/client-app/src/App.tsx":"1","/Users/user/PycharmProjects/soldgame/DotNet/ToDoApp/client-app/src/types/TaskTypes.ts":"2","/Users/user/PycharmProjects/soldgame/DotNet/ToDoApp/client-app/src/models/Task.ts":"3","/Users/user/PycharmProjects/soldgame/DotNet/ToDoApp/client-app/src/components/TaskContainer/TasksContainer.tsx":"4","/Users/user/PycharmProjects/soldgame/DotNet/ToDoApp/client-app/src/reportWebVitals.ts":"5","/Users/user/PycharmProjects/soldgame/DotNet/ToDoApp/client-app/src/components/DoneSection/DoneSection.tsx":"6","/Users/user/PycharmProjects/soldgame/DotNet/ToDoApp/client-app/src/index.tsx":"7","/Users/user/PycharmProjects/soldgame/DotNet/ToDoApp/client-app/src/components/TaskCard/TaskCard.tsx":"8"},{"size":238,"mtime":1609919599892,"results":"9","hashOfConfig":"10"},{"size":158,"mtime":1609860480611,"results":"11","hashOfConfig":"10"},{"size":1006,"mtime":1609925898496,"results":"12","hashOfConfig":"13"},{"size":1217,"mtime":1609922500851,"results":"14","hashOfConfig":"13"},{"size":425,"mtime":1606466316246,"results":"15","hashOfConfig":"13"},{"size":685,"mtime":1609925977204,"results":"16","hashOfConfig":"13"},{"size":500,"mtime":1606466316246,"results":"17","hashOfConfig":"13"},{"size":2815,"mtime":1609925830230,"results":"18","hashOfConfig":"13"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"nir4aq",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1tumzx7",{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},"/Users/user/PycharmProjects/soldgame/DotNet/ToDoApp/client-app/src/App.tsx",[],"/Users/user/PycharmProjects/soldgame/DotNet/ToDoApp/client-app/src/types/TaskTypes.ts",[],"/Users/user/PycharmProjects/soldgame/DotNet/ToDoApp/client-app/src/models/Task.ts",[],"/Users/user/PycharmProjects/soldgame/DotNet/ToDoApp/client-app/src/components/TaskContainer/TasksContainer.tsx",["37","38"],"/Users/user/PycharmProjects/soldgame/DotNet/ToDoApp/client-app/src/reportWebVitals.ts",[],"/Users/user/PycharmProjects/soldgame/DotNet/ToDoApp/client-app/src/components/DoneSection/DoneSection.tsx",["39"],"import React, { useMemo } from \"react\";\nimport \"./DoneSection.css\";\nimport { SectionProps } from \"../../types/SectionTypes\";\nimport { TASK_STATUSES } from \"../../types/TaskTypes\";\nimport TaskCard from \"../TaskCard/TaskCard\";\n\nfunction DoneSection(props: SectionProps) {\n  const { tasks } = props;\n\n  const doneCards = useMemo(() => {\n    const doneTasks = tasks.filter((task) => task.status === \"DONE\");\n\n    const doneCards = doneTasks.map((task) => (\n      <TaskCard {...props} task={task} />\n    ));\n    return doneCards;\n  }, [tasks, props]);\n\n  return (\n    <div className=\"categoryContainer\">\n      <h1>Done2</h1>\n      {doneCards}\n    </div>\n  );\n}\n\nexport default DoneSection;\n","/Users/user/PycharmProjects/soldgame/DotNet/ToDoApp/client-app/src/index.tsx",[],"/Users/user/PycharmProjects/soldgame/DotNet/ToDoApp/client-app/src/components/TaskCard/TaskCard.tsx",["40"],"import React, {\n  ChangeEvent,\n  useState,\n  useRef,\n  useMemo,\n  useCallback,\n} from \"react\";\nimport { Card } from \"@material-ui/core\";\nimport \"./TaskCard.css\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { SectionProps } from \"../../types/SectionTypes\";\nimport Task from \"../../models/Task\";\nimport { TASK_STATUSES } from \"../../types/TaskTypes\";\nimport KeyboardReturnIcon from \"@material-ui/icons/KeyboardReturn\";\n\nfunction EditArea(props: Record<any, any>) {\n  return <textarea {...props} className={\"editArea\"} rows={5} cols={25} />;\n}\n\ntype Props = SectionProps & { task: Task }; // Get access to the task this card should represent, as well as the ability to modify the list of tasks\n\nfunction TaskCard(props: Props) {\n  const [editing, toggleEditing] = useState<boolean>(\n    props.task.content ? false : true\n  );\n\n  const cardContainerRef = useRef<HTMLDivElement>(null);\n\n  const removeTask = useCallback(async () => {\n    try {\n      const { task, tasks, setTasks } = props;\n      await task.delete();\n\n      const filteredTasks = tasks.filter((task) => task !== props.task);\n      setTasks(filteredTasks);\n    } catch (err) {\n      // @TODO: UI error handling\n      console.log(err);\n    }\n  }, [props]);\n\n  const completeTask = async () => {\n    const { task, tasks, setTasks } = props;\n    await task.update();\n    setTasks([...tasks]);\n  };\n\n  const uncompleteTask = useCallback(async () => {\n    const { task, tasks, setTasks } = props;\n    await task.Undone();\n    setTasks([...tasks]);\n  }, [props]);\n\n  const saveTask = async (e: ChangeEvent<HTMLTextAreaElement>) => {\n    try {\n      const { task } = props;\n      task.content = e.target.value;\n      await props.task.create();\n    } catch (err) {\n      // @TODO: UI error handling\n      console.log(err);\n    }\n  };\n\n  const icon = useMemo(() => {\n    if (props.task.status === \"DONE\") {\n      return <KeyboardReturnIcon className=\"icon\" onClick={uncompleteTask} />;\n    } else {\n      return editing ? (\n        <CheckIcon\n          className=\"icon saveIcon\"\n          onClick={() => toggleEditing(false)}\n        />\n      ) : (\n        <DeleteIcon className=\"icon deleteIcon\" onClick={removeTask} />\n      );\n    }\n  }, [props.task.status, editing, removeTask, uncompleteTask]);\n\n  return (\n    <div ref={cardContainerRef} className=\"cardContainer\">\n      <Card\n        className=\"taskCard\"\n        raised\n        onClick={() => {\n          if (!editing && props.task.status !== \"DONE\") completeTask();\n        }}\n      >\n        {editing ? (\n          <EditArea\n            onChange={(e: ChangeEvent<HTMLTextAreaElement>) => saveTask(e)}\n          />\n        ) : (\n          props.task.content\n        )}\n      </Card>\n      {icon}\n    </div>\n  );\n}\n\nexport default TaskCard;\n",{"ruleId":"41","severity":1,"message":"42","line":2,"column":8,"nodeType":"43","messageId":"44","endLine":2,"endColumn":19},{"ruleId":"45","severity":1,"message":"46","line":33,"column":6,"nodeType":"47","endLine":33,"endColumn":8,"suggestions":"48"},{"ruleId":"41","severity":1,"message":"49","line":4,"column":10,"nodeType":"43","messageId":"44","endLine":4,"endColumn":23},{"ruleId":"41","severity":1,"message":"49","line":14,"column":10,"nodeType":"43","messageId":"44","endLine":14,"endColumn":23},"@typescript-eslint/no-unused-vars","'DoneSection' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'tasks'. Either include it or remove the dependency array.","ArrayExpression",["50"],"'TASK_STATUSES' is defined but never used.",{"desc":"51","fix":"52"},"Update the dependencies array to be: [tasks]",{"range":"53","text":"54"},[939,941],"[tasks]"]